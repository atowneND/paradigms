link - ip - trap - payload
socket is a logical file like structure that encapsulates a network comm,
specified by ip address and port #

int main(int argc, char *argv[]){
    int sockfd, portno, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    char buffer[256];
    if (argc < 3){
        fprintf(stderr, "usage %s hostname port\n", argv[0]);
        exit(0);
    }

    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
        error("ERROR opening socket");
    server = gethostbyname(argv[1]);
    if (server == NULL) {
        fprintf(stderr, "ERROR, no such host\n");
        exit(0);
    }
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char 8)server->h_addr, (char *)&serv_addr.sin_addr.s_addr,server->h_length);
    serv_addr.sin_port = htons(portno);
    if (connect(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0)
        error ("ERROR connection");
    printf("Please enter the message: ");
    bzero(buffer, 256)
    fgets(buffer,255,stdin);
    n = wrtie(sockfd, buffer, strlen(buffer));
    if (n < 0)
        error("ERROR writing to socket");
    bzero(buffer, 256);
    n = read(sockfd, buffer, 255);
    if (n < 0)
        error("ERROR reading from socket");
    printf("%s\n", buffer);
    close(sockfd);
    return 0;
}


PYTHON STUFF
import <REACTOR_OBJECT> as reactor #started with a tcp connection

server.host =
server.port =

class ClientConnection(Protocol):
    def __init__(self):
        pass

    def dataReceived(self, data):
        print "received:", data

    def connectionMade(self, data):
        print "made connection"
        self.transport.write(data) # some get request
        # "GET /movies/32 HTTP/1.0\r\n\r\n" 27 bytes

    def connectionLost(self, reason):
        print "connection lost because", reason
        reactor.stop()

class ClientConnectionFactory(ClientFactory):
    def __init__(self):
        self.serverconn = ClientConnection()

    def buildProtocol(self, addr):
        return self.serverconn
        return ClientConnection

if __name__ == "__main__":
    reactor.connectTCP(server.host, server.port, ClientConnectionFactory())
    reactor.run()



reactor object - event dispatcher
client connection - can be a lot of them
    - each manages a single connection to another socket
client connection factory - makes client connections
